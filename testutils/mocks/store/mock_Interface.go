// Code generated by mockery v2.53.3. DO NOT EDIT.

package store

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	events "github.com/tuongaz/go-saas/store/events"

	sqlx "github.com/jmoiron/sqlx"

	store "github.com/tuongaz/go-saas/store"

	types "github.com/tuongaz/go-saas/store/types"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// AddEventHandler provides a mock function with given fields: handler
func (_m *MockInterface) AddEventHandler(handler events.Handler) {
	_m.Called(handler)
}

// MockInterface_AddEventHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEventHandler'
type MockInterface_AddEventHandler_Call struct {
	*mock.Call
}

// AddEventHandler is a helper method to define mock.On call
//   - handler events.Handler
func (_e *MockInterface_Expecter) AddEventHandler(handler interface{}) *MockInterface_AddEventHandler_Call {
	return &MockInterface_AddEventHandler_Call{Call: _e.mock.On("AddEventHandler", handler)}
}

func (_c *MockInterface_AddEventHandler_Call) Run(run func(handler events.Handler)) *MockInterface_AddEventHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(events.Handler))
	})
	return _c
}

func (_c *MockInterface_AddEventHandler_Call) Return() *MockInterface_AddEventHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockInterface_AddEventHandler_Call) RunAndReturn(run func(events.Handler)) *MockInterface_AddEventHandler_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockInterface_Expecter) Close() *MockInterface_Close_Call {
	return &MockInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockInterface_Close_Call) Run(run func()) *MockInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_Close_Call) Return(_a0 error) *MockInterface_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Close_Call) RunAndReturn(run func() error) *MockInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Collection provides a mock function with given fields: table
func (_m *MockInterface) Collection(table string) store.CollectionInterface {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 store.CollectionInterface
	if rf, ok := ret.Get(0).(func(string) store.CollectionInterface); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CollectionInterface)
		}
	}

	return r0
}

// MockInterface_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type MockInterface_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - table string
func (_e *MockInterface_Expecter) Collection(table interface{}) *MockInterface_Collection_Call {
	return &MockInterface_Collection_Call{Call: _e.mock.On("Collection", table)}
}

func (_c *MockInterface_Collection_Call) Run(run func(table string)) *MockInterface_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockInterface_Collection_Call) Return(_a0 store.CollectionInterface) *MockInterface_Collection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Collection_Call) RunAndReturn(run func(string) store.CollectionInterface) *MockInterface_Collection_Call {
	_c.Call.Return(run)
	return _c
}

// DB provides a mock function with no fields
func (_m *MockInterface) DB() *sqlx.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DB")
	}

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	return r0
}

// MockInterface_DB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DB'
type MockInterface_DB_Call struct {
	*mock.Call
}

// DB is a helper method to define mock.On call
func (_e *MockInterface_Expecter) DB() *MockInterface_DB_Call {
	return &MockInterface_DB_Call{Call: _e.mock.On("DB")}
}

func (_c *MockInterface_DB_Call) Run(run func()) *MockInterface_DB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockInterface_DB_Call) Return(_a0 *sqlx.DB) *MockInterface_DB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_DB_Call) RunAndReturn(run func() *sqlx.DB) *MockInterface_DB_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: ctx, query, args
func (_m *MockInterface) Exec(ctx context.Context, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) error); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockInterface_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockInterface_Expecter) Exec(ctx interface{}, query interface{}, args ...interface{}) *MockInterface_Exec_Call {
	return &MockInterface_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockInterface_Exec_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockInterface_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockInterface_Exec_Call) Return(_a0 error) *MockInterface_Exec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_Exec_Call) RunAndReturn(run func(context.Context, string, ...interface{}) error) *MockInterface_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// OnAfterRecordCreated provides a mock function with given fields: ctx, table, record
func (_m *MockInterface) OnAfterRecordCreated(ctx context.Context, table string, record types.Record) error {
	ret := _m.Called(ctx, table, record)

	if len(ret) == 0 {
		panic("no return value specified for OnAfterRecordCreated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Record) error); ok {
		r0 = rf(ctx, table, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_OnAfterRecordCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnAfterRecordCreated'
type MockInterface_OnAfterRecordCreated_Call struct {
	*mock.Call
}

// OnAfterRecordCreated is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - record types.Record
func (_e *MockInterface_Expecter) OnAfterRecordCreated(ctx interface{}, table interface{}, record interface{}) *MockInterface_OnAfterRecordCreated_Call {
	return &MockInterface_OnAfterRecordCreated_Call{Call: _e.mock.On("OnAfterRecordCreated", ctx, table, record)}
}

func (_c *MockInterface_OnAfterRecordCreated_Call) Run(run func(ctx context.Context, table string, record types.Record)) *MockInterface_OnAfterRecordCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.Record))
	})
	return _c
}

func (_c *MockInterface_OnAfterRecordCreated_Call) Return(_a0 error) *MockInterface_OnAfterRecordCreated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_OnAfterRecordCreated_Call) RunAndReturn(run func(context.Context, string, types.Record) error) *MockInterface_OnAfterRecordCreated_Call {
	_c.Call.Return(run)
	return _c
}

// OnAfterRecordDeleted provides a mock function with given fields: ctx, table, record
func (_m *MockInterface) OnAfterRecordDeleted(ctx context.Context, table string, record types.Record) error {
	ret := _m.Called(ctx, table, record)

	if len(ret) == 0 {
		panic("no return value specified for OnAfterRecordDeleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Record) error); ok {
		r0 = rf(ctx, table, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_OnAfterRecordDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnAfterRecordDeleted'
type MockInterface_OnAfterRecordDeleted_Call struct {
	*mock.Call
}

// OnAfterRecordDeleted is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - record types.Record
func (_e *MockInterface_Expecter) OnAfterRecordDeleted(ctx interface{}, table interface{}, record interface{}) *MockInterface_OnAfterRecordDeleted_Call {
	return &MockInterface_OnAfterRecordDeleted_Call{Call: _e.mock.On("OnAfterRecordDeleted", ctx, table, record)}
}

func (_c *MockInterface_OnAfterRecordDeleted_Call) Run(run func(ctx context.Context, table string, record types.Record)) *MockInterface_OnAfterRecordDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.Record))
	})
	return _c
}

func (_c *MockInterface_OnAfterRecordDeleted_Call) Return(_a0 error) *MockInterface_OnAfterRecordDeleted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_OnAfterRecordDeleted_Call) RunAndReturn(run func(context.Context, string, types.Record) error) *MockInterface_OnAfterRecordDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// OnAfterRecordUpdated provides a mock function with given fields: ctx, table, record, oldRecord
func (_m *MockInterface) OnAfterRecordUpdated(ctx context.Context, table string, record types.Record, oldRecord types.Record) error {
	ret := _m.Called(ctx, table, record, oldRecord)

	if len(ret) == 0 {
		panic("no return value specified for OnAfterRecordUpdated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Record, types.Record) error); ok {
		r0 = rf(ctx, table, record, oldRecord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_OnAfterRecordUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnAfterRecordUpdated'
type MockInterface_OnAfterRecordUpdated_Call struct {
	*mock.Call
}

// OnAfterRecordUpdated is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - record types.Record
//   - oldRecord types.Record
func (_e *MockInterface_Expecter) OnAfterRecordUpdated(ctx interface{}, table interface{}, record interface{}, oldRecord interface{}) *MockInterface_OnAfterRecordUpdated_Call {
	return &MockInterface_OnAfterRecordUpdated_Call{Call: _e.mock.On("OnAfterRecordUpdated", ctx, table, record, oldRecord)}
}

func (_c *MockInterface_OnAfterRecordUpdated_Call) Run(run func(ctx context.Context, table string, record types.Record, oldRecord types.Record)) *MockInterface_OnAfterRecordUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.Record), args[3].(types.Record))
	})
	return _c
}

func (_c *MockInterface_OnAfterRecordUpdated_Call) Return(_a0 error) *MockInterface_OnAfterRecordUpdated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_OnAfterRecordUpdated_Call) RunAndReturn(run func(context.Context, string, types.Record, types.Record) error) *MockInterface_OnAfterRecordUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// OnBeforeRecordCreated provides a mock function with given fields: ctx, table, record
func (_m *MockInterface) OnBeforeRecordCreated(ctx context.Context, table string, record types.Record) error {
	ret := _m.Called(ctx, table, record)

	if len(ret) == 0 {
		panic("no return value specified for OnBeforeRecordCreated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Record) error); ok {
		r0 = rf(ctx, table, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_OnBeforeRecordCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnBeforeRecordCreated'
type MockInterface_OnBeforeRecordCreated_Call struct {
	*mock.Call
}

// OnBeforeRecordCreated is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - record types.Record
func (_e *MockInterface_Expecter) OnBeforeRecordCreated(ctx interface{}, table interface{}, record interface{}) *MockInterface_OnBeforeRecordCreated_Call {
	return &MockInterface_OnBeforeRecordCreated_Call{Call: _e.mock.On("OnBeforeRecordCreated", ctx, table, record)}
}

func (_c *MockInterface_OnBeforeRecordCreated_Call) Run(run func(ctx context.Context, table string, record types.Record)) *MockInterface_OnBeforeRecordCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.Record))
	})
	return _c
}

func (_c *MockInterface_OnBeforeRecordCreated_Call) Return(_a0 error) *MockInterface_OnBeforeRecordCreated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_OnBeforeRecordCreated_Call) RunAndReturn(run func(context.Context, string, types.Record) error) *MockInterface_OnBeforeRecordCreated_Call {
	_c.Call.Return(run)
	return _c
}

// OnBeforeRecordDeleted provides a mock function with given fields: ctx, table, record
func (_m *MockInterface) OnBeforeRecordDeleted(ctx context.Context, table string, record types.Record) error {
	ret := _m.Called(ctx, table, record)

	if len(ret) == 0 {
		panic("no return value specified for OnBeforeRecordDeleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Record) error); ok {
		r0 = rf(ctx, table, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_OnBeforeRecordDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnBeforeRecordDeleted'
type MockInterface_OnBeforeRecordDeleted_Call struct {
	*mock.Call
}

// OnBeforeRecordDeleted is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - record types.Record
func (_e *MockInterface_Expecter) OnBeforeRecordDeleted(ctx interface{}, table interface{}, record interface{}) *MockInterface_OnBeforeRecordDeleted_Call {
	return &MockInterface_OnBeforeRecordDeleted_Call{Call: _e.mock.On("OnBeforeRecordDeleted", ctx, table, record)}
}

func (_c *MockInterface_OnBeforeRecordDeleted_Call) Run(run func(ctx context.Context, table string, record types.Record)) *MockInterface_OnBeforeRecordDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.Record))
	})
	return _c
}

func (_c *MockInterface_OnBeforeRecordDeleted_Call) Return(_a0 error) *MockInterface_OnBeforeRecordDeleted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_OnBeforeRecordDeleted_Call) RunAndReturn(run func(context.Context, string, types.Record) error) *MockInterface_OnBeforeRecordDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// OnBeforeRecordUpdated provides a mock function with given fields: ctx, table, record, oldRecord
func (_m *MockInterface) OnBeforeRecordUpdated(ctx context.Context, table string, record types.Record, oldRecord types.Record) error {
	ret := _m.Called(ctx, table, record, oldRecord)

	if len(ret) == 0 {
		panic("no return value specified for OnBeforeRecordUpdated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Record, types.Record) error); ok {
		r0 = rf(ctx, table, record, oldRecord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockInterface_OnBeforeRecordUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnBeforeRecordUpdated'
type MockInterface_OnBeforeRecordUpdated_Call struct {
	*mock.Call
}

// OnBeforeRecordUpdated is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - record types.Record
//   - oldRecord types.Record
func (_e *MockInterface_Expecter) OnBeforeRecordUpdated(ctx interface{}, table interface{}, record interface{}, oldRecord interface{}) *MockInterface_OnBeforeRecordUpdated_Call {
	return &MockInterface_OnBeforeRecordUpdated_Call{Call: _e.mock.On("OnBeforeRecordUpdated", ctx, table, record, oldRecord)}
}

func (_c *MockInterface_OnBeforeRecordUpdated_Call) Run(run func(ctx context.Context, table string, record types.Record, oldRecord types.Record)) *MockInterface_OnBeforeRecordUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.Record), args[3].(types.Record))
	})
	return _c
}

func (_c *MockInterface_OnBeforeRecordUpdated_Call) Return(_a0 error) *MockInterface_OnBeforeRecordUpdated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockInterface_OnBeforeRecordUpdated_Call) RunAndReturn(run func(context.Context, string, types.Record, types.Record) error) *MockInterface_OnBeforeRecordUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// Tx provides a mock function with given fields: ctx
func (_m *MockInterface) Tx(ctx context.Context) (*store.StoreTx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Tx")
	}

	var r0 *store.StoreTx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*store.StoreTx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *store.StoreTx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.StoreTx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockInterface_Tx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tx'
type MockInterface_Tx_Call struct {
	*mock.Call
}

// Tx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockInterface_Expecter) Tx(ctx interface{}) *MockInterface_Tx_Call {
	return &MockInterface_Tx_Call{Call: _e.mock.On("Tx", ctx)}
}

func (_c *MockInterface_Tx_Call) Run(run func(ctx context.Context)) *MockInterface_Tx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockInterface_Tx_Call) Return(_a0 *store.StoreTx, _a1 error) *MockInterface_Tx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockInterface_Tx_Call) RunAndReturn(run func(context.Context) (*store.StoreTx, error)) *MockInterface_Tx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
